{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Header","UploadArea","props","className","type","name","accept","onInput","inputEventHandler","RawOutput","text","PreviewArea","gifSrc","thumbnailSrc","src","Controls","Footer","App","useState","setThumbnailSrc","fileSrc","setFileSrc","ffmpegOutput","setFfmpegOutput","fileSelected","event","a","file","target","files","ffmpeg","createFFmpeg","corePath","log","setLogger","message","console","load","fetchFile","FS","run","thumbnail","URL","createObjectURL","Blob","buffer","data","dataURL","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4QAqEA,IAAMA,EAAS,WACd,OACC,mCACC,iCACC,mDAMEC,EAAa,SAACC,GACnB,OACC,mCACC,uBAAOC,UAAU,cAAjB,SACC,uBAAOC,KAAK,OAAOC,KAAK,SAASC,OAAO,UAAUC,QAAUL,EAAMM,yBAMhEC,EAAY,SAACP,GAClB,OACC,mCACC,8BAAOA,EAAMQ,MAAQ,yBAKlBC,EAAc,SAACT,GACpB,IAAQU,EAAyBV,EAAzBU,OAAQC,EAAiBX,EAAjBW,aAEhB,OACC,sBAAKV,UAAU,UAAf,WACIS,GAAUC,GAAgB,qBAAKC,IAAMD,IACtCD,GAAU,qBAAKE,IAAMF,QAKpBG,EAAW,WAChB,OACC,mCACC,+BACC,wBAAQZ,UAAU,kBAAlB,2BAMEa,EAAS,WACd,OACC,mCACC,iCAAU,wCAKEC,EAzHf,WACC,MAA0CC,mBAAS,IAAnD,mBAAQL,EAAR,KAAsBM,EAAtB,KACA,EAAgCD,mBAAS,IAAzC,mBAAQE,EAAR,KAAiBC,EAAjB,KACA,EAA0CH,mBAAS,IAAnD,mBAAQI,EAAR,KAAsBC,EAAtB,KAEMC,EAAY,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,2DACdC,EAAOF,EAAMG,OAAOC,MAAM,IADZ,wBAIbC,EAASC,uBAAa,CAC3BC,SAAU,iBACVC,KAAK,KAGCC,WAAU,YAAwB,IAArB9B,EAAoB,EAApBA,KAAM+B,EAAc,EAAdA,QACzBC,QAAQH,IAAI7B,EAAM+B,GAClBZ,EAAgBY,MAXE,SAcbL,EAAOO,OAdM,mBAgBnBP,EAhBmB,SAgBmBQ,oBAAUX,GAhB7B,+BAgBZY,GAhBY,UAgBT,YAAa,QAhBJ,gBAkBbT,EAAOU,IACZ,KACA,QACA,MAAM,OAAQ,WAAY,IAAK,KAAM,SACrC,iBAtBkB,eAyBbC,EAAYX,EAAOS,GAAG,WAAY,iBAExCpB,EAAgBuB,IAAIC,gBACnB,IAAIC,KAAK,CAACH,EAAUI,QAAS,CAAEzC,KAAM,gBA5BnB,UA+Bb0B,EAAOU,IAAI,KAAM,QAAS,KAAM,MAAM,cA/BzB,QAiCnBjB,EAAgB,iBAEVuB,EAAOhB,EAAOS,GAAG,WAAY,cAEnChB,EAAgB,SAEVwB,EAAUL,IAAIC,gBACnB,IAAIC,KAAK,CAACE,EAAKD,QAAS,CAAEzC,KAAM,eAGjCiB,EAAW0B,GA3CQ,4CAAH,sDA+ClB,OACC,sBAAK5C,UAAU,UAAf,UACC,cAAC,EAAD,KACGU,GAAgB,cAAC,EAAD,CAAYL,kBAAoBgB,IACnD,cAAC,EAAD,CAAaX,aAAeA,EAAeD,OAASQ,IACpD,cAAC,EAAD,CAAWV,KAAOY,IACjB,cAAC,EAAD,IACC,cAAC,EAAD,QCpDU0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2fb77234.chunk.js","sourcesContent":["import {createFFmpeg, fetchFile } from '@ffmpeg/ffmpeg';\nimport './App.css';\nimport { useState, useEffect } from 'react';\nimport fs from 'fs';\n\nfunction App() {\n\tconst [ thumbnailSrc, setThumbnailSrc ] = useState('');\n\tconst [ fileSrc, setFileSrc ] = useState('');\n\tconst [ ffmpegOutput, setFfmpegOutput ] = useState('');\n\n\tconst fileSelected = async (event) => {\n\t\tconst file = event.target.files[0];\n\n\t\tif (file) {\n\t\t\tconst ffmpeg = createFFmpeg({ \n\t\t\t\tcorePath: 'ffmpeg-core.js',\t\n\t\t\t\tlog: true \n\t\t\t});\n\n\t\t\tffmpeg.setLogger(({ type, message }) => {\n\t\t\t\tconsole.log(type, message);\n\t\t\t\tsetFfmpegOutput(message);\n\t\t\t});\n\n\t\t\tawait ffmpeg.load();\n\n\t\t\tffmpeg.FS('writeFile', 'input', await fetchFile(file));\n\n\t\t\tawait ffmpeg.run(\n\t\t\t\t'-i', \n\t\t\t\t'input', \n\t\t\t\t'-ss','0.01', '-vframes' ,'1', '-f', 'image2', \n\t\t\t\t'thumbnail.jpg'\n\t\t\t);\n\n\t\t\tconst thumbnail = ffmpeg.FS('readFile', 'thumbnail.jpg');\n\n\t\t\tsetThumbnailSrc(URL.createObjectURL(\n\t\t\t\tnew Blob([thumbnail.buffer], { type: 'image/jpg' })\n\t\t\t));\n\n\t\t\tawait ffmpeg.run('-i', 'input', '-f', 'gif','output.gif');\n\n\t\t\tsetFfmpegOutput(\"ffmpeg exited\")\n\n\t\t\tconst data = ffmpeg.FS('readFile', 'output.gif');\n\t\t\n\t\t\tsetFfmpegOutput(\"Done.\")\n\n\t\t\tconst dataURL = URL.createObjectURL(\n\t\t\t\tnew Blob([data.buffer], { type: 'image/gif' })\n\t\t\t);\n\n\t\t\tsetFileSrc(dataURL);\n\t\t}\n\t}\n\n\treturn (\n\t\t<div className=\"content\">\n\t\t\t<Header/>\n\t\t\t{ !thumbnailSrc && <UploadArea inputEventHandler={ fileSelected } /> }\n\t\t\t<PreviewArea thumbnailSrc={ thumbnailSrc } gifSrc={ fileSrc } />\n\t\t\t<RawOutput text={ ffmpegOutput } />\n\t \t\t<Controls/>\n\t  \t\t<Footer/>\n\t\t</div>\n\t);\n}\n\nconst Header = () => {\n\treturn (\n\t\t<>\n\t\t\t<header>\n\t\t\t\t<h1>smaller.pics</h1>\n\t\t\t</header>\n\t\t</>\n\t)\n}\n\nconst UploadArea = (props) => {\n\treturn (\n\t\t<>\n\t\t\t<label className=\"upload-area\">\n\t\t\t\t<input type=\"file\" name=\"upload\" accept=\"video/*\" onInput={ props.inputEventHandler }/>\n\t\t\t</label>\n\t\t</>\n\t)\n}\n\nconst RawOutput = (props) => {\n\treturn (\n\t\t<>\n\t\t\t<pre>{ props.text || 'ffmpeg not loaded' }</pre>\n\t\t</>\n\t);\n}\n\nconst PreviewArea = (props) => {\n\tconst { gifSrc, thumbnailSrc } = props;\n\n\treturn (\n\t\t<div className=\"preview\">\n\t\t\t{ !gifSrc && thumbnailSrc && <img src={ thumbnailSrc } />}\n\t\t\t{ gifSrc && <img src={ gifSrc } />}\n\t\t</div>\n\t)\n}\n\nconst Controls = () => {\n\treturn (\n\t\t<>\n\t\t\t<form>\n\t\t\t\t<button className=\"download-button\">DOWNLOAD</button>\n\t\t\t</form>\n\t\t</>\n\t)\n}\n\nconst Footer = () => {\n\treturn (\n\t\t<>\n\t\t\t<footer>{ \"made with ðŸ’œ by manila\" }</footer>\n\t\t</>\n\t)\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}